@page "/PageDashboard"
@using ApexCharts;
@inject ProxyVenta ProxyVenta
@inject ProxyProducto ProxyProducto
@inject SweetAlertService Swal
@inject IToastService ToastService
@attribute [Authorize(Roles = "admin_rol")]

<PageTitle>Dashboard</PageTitle>



<div class="container-fluid">
    <div class="row d-flex gy-3">
        @if (ListProducts.Any())
        {
            <div class="card mx-2 " style="width: 25rem;">
                <ApexChart TItem="ModelGraph"
                           Title="Inventario">

                    <ApexPointSeries TItem="ModelGraph"
                                     Items="ListProducts"
                                     Name="Valor"
                                     SeriesType="SeriesType.Pie"
                                     XValue="@(e => e.Descripcion)"
                                     YAggregate="@(e => e.Sum(e => e.Cantidad))"
                                     OrderByDescending="e=>e.Y" />
                </ApexChart>
            </div>

            <div class="card mx-2" style="width: 25rem;">
                <ApexChart TItem="ModelGraph"
                           Title="Inventario">

                    <ApexPointSeries TItem="ModelGraph"
                                     Items="ListProducts"
                                     Name="Valor"
                                     SeriesType="SeriesType.Line"
                                     XValue="@(e => e.Descripcion)"
                                     YAggregate="@(e => e.Sum(e => e.Cantidad))"
                                     OrderByDescending="e=>e.Y" />


                </ApexChart>
            </div>

            <div class="card mx-2" style="width: 25rem;">
                <ApexChart TItem="ModelGraph"
                           Title="Inventario">

                    <ApexPointSeries TItem="ModelGraph"
                                     Items="ListProducts"
                                     Name="Valor"
                                     SeriesType="SeriesType.Treemap"
                                     XValue="@(e => e.Descripcion)"
                                     YAggregate="@(e => e.Sum(e => e.Cantidad))"
                                     OrderByDescending="e=>e.Y" />


                </ApexChart>
            </div>
            <div class="card mx-2" style="width: 25rem;">
                <ApexChart TItem="ModelGraph"
                           Title="Ventas">

                    <ApexPointSeries TItem="ModelGraph"
                                     Items="ListVentas"
                                     Name="Ventas"
                                     SeriesType="SeriesType.Bar"
                                     XValue="@(e => e.Descripcion)"
                                     YAggregate="@(e => e.Sum(e => e.Cantidad))"
                                     OrderByDescending="e=>e.Y" />


                </ApexChart>
            </div>
            <div class="card mx-2" style="width: 25rem;">
                <ApexChart TItem="ModelGraph"
                           Title="Ventas">

                    <ApexPointSeries TItem="ModelGraph"
                                     Items="ListVentas"
                                     Name="Ventas"
                                     SeriesType="SeriesType.Donut"
                                     XValue="@(e => e.Descripcion)"
                                     YAggregate="@(e => e.Sum(e => e.Cantidad))"
                                     OrderByDescending="e=>e.Y" />


                </ApexChart>
            </div>
            <div class="card mx-2" style="width: 25rem;">
                <ApexChart TItem="ModelGraph"
                           Title="Ventas">

                    <ApexPointSeries TItem="ModelGraph"
                                     Items="ListVentas"
                                     Name="Ventas"
                                     SeriesType="SeriesType.Area"
                                     XValue="@(e => e.Descripcion)"
                                     YAggregate="@(e => e.Sum(e => e.Cantidad))"
                                     OrderByDescending="e=>e.Y" />


                </ApexChart>
            </div>
        }

    </div>
</div>
<ComponentLoading IsLoading="IsLoading">
</ComponentLoading>

@code {


    public class ModelGraph
    {
        public int Cantidad { set; get; } = 0;
        public string Descripcion { set; get; } = "";
    };

    private bool IsLoading { get; set; } = true;
    private List<ModelGraph> ListProducts { get; set; } = new List<ModelGraph>();
    private List<ModelGraph> ListVentas { get; set; } = new List<ModelGraph>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsLoading = true;
            // Productos
            var responseProductos = await ProxyProducto.ListAsync();

            if (!responseProductos.Success)
            {
                IsLoading = false;
                throw new Exception(responseProductos.ErrorMessage);
            }

            if (responseProductos.Data != null)
            {
                foreach (var item in responseProductos.Data!)
                {
                    ListProducts.Add(new ModelGraph() { Cantidad = item.Inventario, Descripcion = item.Descripcion });

                }
            }

            // Ventas
            var responseVenta = await ProxyVenta.ListAsync();

            if (!responseVenta.Success)
            {
                _ = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Text = responseVenta.ErrorMessage,
                        Title = "Error",
                        Icon = SweetAlertIcon.Error,
                        ShowCloseButton = true
                    });
                return;
            }

            if (responseVenta.Data != null)
            {

                foreach (var item in responseVenta.Data!)
                {
                    double total = @item._FacturaDetalle.Sum(x => x.Cantidad * x.PrecioUnitario);
                    total = total + @item._FacturaDetalle.Sum(x => x.Impuesto);
                    var model = new ModelGraph() { Cantidad = (int)total, Descripcion = item._Cliente.Nombre.Trim() + " " + item._Cliente.Apellidos.Trim() };

                    ListVentas.Add(model);
                }
            }

        }
        catch (Exception ex)
        {
            IsLoading = false;
            _ = await Swal.FireAsync(new SweetAlertOptions
                {
                    Text = ex.Message,
                    Title = "Error",
                    Icon = SweetAlertIcon.Error,
                    ShowCloseButton = true
                });
        }
        finally
        {
            
            IsLoading = false;
        }
    }

    /*
    private BaseResponseGeneric<ICollection<ProductoDTO>> GetTask()
        {
        var task = ProxyProducto.ListAsync();

        return task.Result;
    }

    protected override void OnInitialized()
        {


        // await Task.Delay(5000);
        //var response = await ProxyProducto.ListAsync();
            try
            {
            //var task = ProxyProducto.ListAsync();

            var x = GetTask();

            #region
            Order o1 = new Order()
                    {
                    Cantidad = 120,
                    Descripcion = "Producto A"
            };

            Order o2 = new Order()
                    {
                    Cantidad = 33,
                    Descripcion = "Producto B"
            };

            Order o3 = new Order()
                    {
                    Cantidad = 25,
                    Descripcion = "Producto C"
            };

            Order o4 = new Order()
                    {
                    Cantidad = 88,
                    Descripcion = "Producto D"
        };
        List.Add(o1);
        List.Add(o2);
        List.Add(o3);
        List.Add(o4);
        #endregion
        }
        catch (Exception ex)
            {
            _ = Swal.FireAsync(new SweetAlertOptions
                    {
                    Text = ex.Message,
                    Title = "Error",
                    Icon = SweetAlertIcon.Error,
                    ShowCloseButton = true
                    });
                        }


                            }
    */

}