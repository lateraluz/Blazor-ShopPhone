@page "/ClienteListPage"

@inject ProxyCliente ProxyCliente
@inject SweetAlertService Swal
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Mantenimiento Cliente</PageTitle>


<div class="container">
    <div class="card ">
        <h5 class="card-header">Consulta Cliente</h5>
        <div class="card-body border-radius: .5rem">
            <div class="row">

                <div class="col-md-3">
                    <input type="text" @bind="_filtro" class="form-control" placeholder="Ingrese el nombre" />
                </div>

                <div class="col-md-2">
                    <button class="btn btn-primary form-control" @onclick="OnSearch">Buscar</button>
                </div>
                <div class="col-md-2">
                    <button class="btn btn-secondary form-control" @onclick="OnClear">Limpiar</button>
                </div>
            </div>
        </div>
    </div>


    <div class="card mt-2">
        <div class="card-body">
            <section class="intro">
                <table class="table table-responsive-md table-striped table-hover table-sm mt-3" style="border-radius: 6px; overflow: hidden; font-size:medium">
                    <thead style="background-color: black; color: #fff; cursor:pointer ; height: 50px;text-align: left; vertical-align: middle;">
                        <tr>
                            <th scope="col" @onclick='(()=> Sort("IdCategoria"))'>
                                Código
                            </th>
                            <th scope="col" class="" @onclick='(()=> Sort("Nombre"))'>
                                Nombre
                            </th>
                            <th scope="col" class="" @onclick='(()=> Sort("Estado"))'>
                                Estado
                            </th>
                            <th scope="col" class="" @onclick='(()=> Sort("Telefono"))'>
                                Telefono
                            </th>
                            <th scope="col" class="" @onclick='(()=> Sort("Correo"))'>
                                Correo
                            </th>

                            <th scope="col" style="text-align: center;">
                                Accion
                            </th>

                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in _list!.Skip(RECORDS_PER_PAGE * (_paginaActual - 1)).Take(RECORDS_PER_PAGE))
                        {
                            string nombre = $"{item.Nombre} {item.Apellidos}";
                            <tr style="">
                                <td>@item.IdCliente</td>
                                <td>@nombre</td>
                                <td>@(item.Estado == true ? "Activo" : "Inactivo")</td>
                                <td>@item.Telefono</td>
                                <td>@item.CorreoElectronico</td>
                                <td align="Center">
                                    <button class="btn btn-primary " @onclick="() => OnEdit(item.IdCliente)">Editar</button>
                                    <button class="btn btn-danger " @onclick=" ()=> OnDelete( item.IdCliente )">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

            </section>

            @if (_list!.Count > 0)
            {
                <div class="card-footer">
                    <div class="row">
                        <nav aria-label="Page navigation">
                            <ul class="pagination">
                                <li class="page-item">
                                    <button class="page-link btn" @onclick="()=>Previous()">Previous</button>
                                </li>
                                @{
                                    decimal cantidad = _list!.Count / RECORDS_PER_PAGE;
                                    if (_list!.Count % RECORDS_PER_PAGE > 0)
                                        cantidad++;

                                    for (int index = 1; index <= (int)cantidad; index++)
                                    {
                                        int currentIndex = index;
                                        <li class="page-item">
                                            <button class="page-link btn" @onclick="()=>GoToPage(currentIndex)">@index</button>
                                        </li>
                                    }
                                }
                                <li class="page-item">
                                    <button class="page-link" @onclick="()=>Next()">Next</button>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            }
        </div>
    </div>
    <button class="btn btn-primary mt-2 col-3" @onclick="OnCreate">Nuevo</button>
</div>


<ComponentLoading IsLoading="IsLoading">
</ComponentLoading>


@code {
    private IList<ClienteDTO>? _list { get; set; } = new List<ClienteDTO>();
    private string _filtro { set; get; } = "";
    private const int RECORDS_PER_PAGE = 4;
    private int _paginaActual { set; get; }
    private bool IsLoading = false;

    private void OnCreate()
    {
        NavigationManager.NavigateTo("/ClienteNewPage");
    }

    private void OnEdit(int id)
    {
        NavigationManager.NavigateTo($"/ClienteEditPage/edit/{id}");
    }

    private async Task OnDelete(int id)
    {
        try
        {
            var response = await Swal.FireAsync(new SweetAlertOptions
                {
                    Text = $"Desea Borrar el registro {id}",
                    Title = "Atención",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ShowConfirmButton = true
                });

            if (response.IsConfirmed)
            {
                await ProxyCliente.DeleteAsync(id);
                await OnSearch();
                /* No se borra se actualiza
                var categoria = _list!.ToList().Find(p => p.IdCategoria == id);
                if (categoria != null)
                    _list!.Remove(categoria);
            */
            }

        }
        catch (Exception ex)
        {
            _ = await Swal.FireAsync(new SweetAlertOptions
                {
                    Text = ex.Message,
                    Title = "Error",
                    Icon = SweetAlertIcon.Error,
                    ShowCloseButton = true
                });
        }
    }

    private async Task OnSearch()
    {
        var response = new BaseResponseGeneric<ICollection<ClienteDTO>>();
        try
        {
            /*
                if (string.IsNullOrEmpty(_filtro))
                {
                    _ = await Swal.FireAsync(new SweetAlertOptions
                        {
                        Title = "Atención",
                        Text = "Ingrese la nombre del cliente",
                        Icon = SweetAlertIcon.Warning,
                        ShowCloseButton = true,
                        TimerProgressBar = true,
                    Timer = 1500
                });
            return;
            }
            */
            IsLoading = true;
            if (!string.IsNullOrEmpty(_filtro))
                response = await ProxyCliente.FindByDescriptionAsync(_filtro);
            else
                response = await ProxyCliente.ListAsync();

              
            if (response.Success == true)
            {
                _list = response.Data!.ToList();

                if (_list.Count == 0)
                {
                    IsLoading = false;
                    StateHasChanged();
                    ToastService.ShowWarning("No existen registro ", settings =>
                    {
                        settings.ShowProgressBar = true;
                        settings.IconType = IconType.Blazored;
                        settings.Timeout = 5;
                    });
                }
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            StateHasChanged();
            _ = await Swal.FireAsync(new SweetAlertOptions
                {
                    Text = ex.Message,
                    Title = "Error",
                    Icon = SweetAlertIcon.Error,
                    ShowCloseButton = true
                });
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnClear()
    {
        _list = new List<ClienteDTO>();
        await Task.FromResult(_list);
    }

    private void Sort(string tipo)
    {

        List<ClienteDTO> lista = new List<ClienteDTO>();

        if (_list == null)
            return;

        if (_list.Count > 0)
            lista = _list.ToList();
        IsLoading = true;

        switch (tipo)
        {
            case "IdCliente":
                _list = lista.OrderBy(x => x.IdCliente).ToList();
                break;
            case "Nombre":
                _list = lista.OrderBy(x => x.Nombre).ToList();
                break;
            case "Estado":
                _list = lista.OrderBy(x => x.Estado).ToList();
                break;
            case "Telefono":
                _list = lista.OrderBy(x => x.Telefono).ToList();
                break;
            case "Correo":
                _list = lista.OrderBy(x => x.CorreoElectronico).ToList();
                break;
        }

        IsLoading = false;
        GoToPage(1);

    }

    private void GoToPage(int pIndex)
    {
        _paginaActual = pIndex;
    }

    private void Next()
    {
        decimal cantidad = _list!.Count / RECORDS_PER_PAGE;
        if (_list!.Count % RECORDS_PER_PAGE > 0)
            cantidad++;

        if (_paginaActual != cantidad)
            _paginaActual++;
    }

    private void Previous()
    {
        if (!(_paginaActual - 1 <= 0))
            _paginaActual--;
    }

}
