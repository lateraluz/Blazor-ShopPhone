@page "/ClienteNewPage"
@inject ProxyCliente ProxyCliente
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal



<div class="container">
    <div class="card">
        <h5 class="card-header">Agregar Cliente</h5>
        <div class="card-body border-radius: .5rem ">

            <EditForm Model="@_clienteDTO" OnSubmit="OnSave">
                <div class="row mb-2">
                    <div class="col-md-6">
                        <label class="form-label">Código Cliente</label>
                        <input type="number" class="form-control" placeholder="Código del Cliente" @bind-value="@_clienteDTO.IdCliente">
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Nombre</label>
                        <input type="text" class="form-control" placeholder="Nombre" @bind-value="@_clienteDTO.Nombre">
                    </div>
                </div>

                <div class="row mb-2">
                    <div class="col-md-6">
                        <label class="form-label">Apellidos</label>
                        <input type="text" class="form-control" placeholder="Apellidos" @bind-value="@_clienteDTO.Apellidos">
                    </div>
                    <div class="col-md-6 ">
                        <label class="form-label">Fecha Nac.</label>
                        <input type="date" class="form-control" placeholder="Fecha Nac" @bind-value="@_clienteDTO.FechaNacimiento">
                    </div>
                </div>

                <div class="row mb-2">
                    <div class="col-md-6">
                        <label class="form-label">Correo</label>
                        <input type="email" class="form-control" placeholder="Correo Electrónico" @bind-value="@_clienteDTO.CorreoElectronico">
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Telefono</label>
                        <input type="text" class="form-control" placeholder="Telefono" @bind-value="@_clienteDTO.Telefono">
                    </div>
                </div>

                <div class="row mb-2">
                    <div class="col-md-6">
                        <label class="form-check-label">Estado</label>
                    </div>
                    <div class=" form-switch  col-md-11  mx-3">
                        <input class="form-check-input" type="checkbox" @bind-value="@_clienteDTO.Estado" checked="@(_clienteDTO.Estado? "checked":null)">
                    </div>
                </div>
                 

                <div class="button-group">
                    <button type="submit" class="btn btn-primary  ">Salvar</button>
                    <button class="btn btn-secondary  " @onclick="OnClear">Limpiar</button>
                    <button class="btn btn-warning  " @onclick="OnReturn">Salir</button>
                </div>

            </EditForm>
        </div>
    </div>
</div>


@code {

    private ClienteDTO _clienteDTO  { get; set; } = new() { Estado = true};


    private void OnClear()
    {
        _clienteDTO = new() {  Estado = true};
    }

    private void OnReturn()    
    {
        NavigationManager.NavigateTo("/ClienteListPage");
    }

    private async void OnSave()
    {
        try
        {
            // Validations
            if (_clienteDTO.IdCliente <= 0)
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Text = $"El código del cliente no puede ser {_clienteDTO.IdCliente} ",
                        Title = "Atención",
                        Icon = SweetAlertIcon.Warning,
                        ShowCloseButton = true,
                        TimerProgressBar = true,
                        Timer = 1500
                    });
                return;
            }

            if (string.IsNullOrEmpty(_clienteDTO.Nombre) || string.IsNullOrEmpty(_clienteDTO.Apellidos))
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Text = $"El Nombre y Apellidos es requerido",
                        Title = "Atención",
                        Icon = SweetAlertIcon.Warning,
                        ShowCloseButton = true,
                        TimerProgressBar = true,
                        Timer = 1500
                    });
                return;
            }


            if (string.IsNullOrEmpty(_clienteDTO.CorreoElectronico))
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Text = $"El correo es un dato requerido",
                        Title = "Atención",
                        Icon = SweetAlertIcon.Warning,
                        ShowCloseButton = true,
                        TimerProgressBar = true,
                        Timer = 1500
                    });
                return;
            }


            var response = await ProxyCliente.AddAsync(_clienteDTO);

            if (!response.Success)
            {
                _ = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Text = response.ErrorMessage,
                        Title = "Error al Salvar Cliente",
                        Icon = SweetAlertIcon.Error,
                        ShowCloseButton = true
                    });
            }
            else            
            {
                _ = await Swal.FireAsync(new SweetAlertOptions()
                    {
                        Title = "Atención",
                        Text = "Registro salvado con éxito",
                        Icon = SweetAlertIcon.Success,
                        Timer = 1500,
                        TimerProgressBar = true
                    });
            }

            _clienteDTO = new() { Estado = true };
            OnClear();
        }
        catch (Exception ex)
        {          

            _ = await Swal.FireAsync(new SweetAlertOptions
                {
                    Text = ex.Message,
                    Title = "Error",
                    Icon = SweetAlertIcon.Error,
                    ShowCloseButton = true
                });
        }
    }    
}
